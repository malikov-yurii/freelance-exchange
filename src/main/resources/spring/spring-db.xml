<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

    <!--<jdbc:initialize-database data-source="dataSource" enabled="${database.init}">-->
    <!--<jdbc:script location="classpath:db/${jdbc.initLocation}"/>-->
    <!--<jdbc:script encoding="utf-8" location="classpath:db/populateTestDB.sql"/>-->
    <!--</jdbc:initialize-database>-->

    <!-- Choose profile from (heroku, postgres)-->
    <beans profile="postgres">
        <tx:annotation-driven/>
        <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>

        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:driverClassName="${jdbc.driver.class}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"
              p:removeAbandoned="true"
              p:maxWait="20000"
              p:testWhileIdle="true"
              p:validationQuery="SELECT 1 FROM users"
              p:testOnBorrow="true"
              p:maxActive="10"
              p:minIdle="2"
              p:maxIdle="5"
              p:initialSize="2"
              p:testOnConnect="true"
        />
    </beans>


    <beans profile="heroku">
        <context:property-placeholder location="classpath:/db/heroku.properties" system-properties-mode="OVERRIDE"/>

        <bean class="java.net.URI" id="dbUrl">
            <constructor-arg value="${DATABASE_URL}"/>
        </bean>
        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:url="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }"
              p:username="#{ @dbUrl.getUserInfo().split(':')[0] }"
              p:password="#{ @dbUrl.getUserInfo().split(':')[1] }"
              p:driverClassName="org.postgresql.Driver"
              p:validationQuery="SELECT 1 FROM users"
              p:maxActive="10"
              p:minIdle="2"
              p:maxWait="20000"
              p:initialSize="2"
              p:maxIdle="5"
              p:testOnBorrow="true"
              p:removeAbandoned="true"
              p:testOnConnect="true"
              p:testWhileIdle="true"/>
    </beans>

    <!--<beans profile="tomcat">-->
    <!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/shopsystem"/>-->
    <!--<context:property-placeholder location="classpath:db/tomcat.properties" system-properties-mode="OVERRIDE"/>-->
    <!--</beans>-->


    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="com.malikov.**.model">
        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                       value="${hibernate.use_sql_comments}"/>
                <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}" value="org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory"/>-->
                <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>-->
                <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}" value="false"/> &lt;!&ndash;default&ndash;&gt;-->
                <!--<entry key="#{T(org.hibernate.cache.ehcache.AbstractEhcacheRegionFactory).NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME}" value="cache/ehcache.xml"/>-->
            </map>
        </property>

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:showSql="${jpa.showSql}">
            </bean>
        </property>
    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <bean class="com.malikov.freelance.repository.JpaUtil"/>

    <context:component-scan base-package="com.malikov.freelance.repository.jpa"/>

</beans>